FUNZIONI IMPLEMENTATE:
    
    -IMPLEMENTATE E DEFINITIVE:
        -Creazione e messa in stato di ascolto socket su una porta data in input (default 8080);
        -stampa di errori su stderr;
        -authenticatedClient: funzione che autorizza un client e restituisce il socket_descriptor_t di questo.
        -check_credentials: controlla se esistono le credenziali fornite dall'utente all'interno del file passwd.
        -functionality.execute_command_threads

    -IMPLEMENTATE, DA MIGLIORARE(in fase beta):
       -output su browser non legge correttamente i caratteri ascii

-FUNZIONI DA IMPLEMENTARE:
    -

--------------------------------------------------------
COSE FATTE IL 11/11
- Unix:
	-implementato meccanismo di lock della funzione accept, sia per thread che processi facendo uso di mmap 
	
--------------------------------------------------------

NOTE :
    -ricordarsi di disallocare memoria
    -ricordarsi di aggiungere in ogni header(.h) "#ifndef _NOMEFILE_H_ ...."
    -ricordarsi di fare gli include di file del progetto solamente dopo aver importato le librerie standard di C
    -in functionality.get_response_file avrei potuto gestire il file_mapping in modo che potesse essere condiviso con altri thread

------------------------------------------------------
BOZZA DELLE FUNZIONI DA FARE:
    
----------------------------------------------------------
SCELTE PROGETTUALI:
        \Dati autenticazione:
                            Lunghezza masssima username: 20
                            Lunghezza masssima password: 10
        \File passwd: gestore credenziali, se il file esiste nella directory lo apre, altrimenti lo crea ed inserisce al suo interno 
            una password di root (es. root:root)

        \functionality.get_response_file, se richiesta codifica apre il file in modo esclusivo, lo mappa in memoria dopodiche codifica il file mappato in copy-on-write
		ne fa una copia che poi ritornera' al server.

        \FILE CONFIG: All'interno del file di configurazione sono presenti delle costanti che rappresentano dei parametri necessari al funzionamento del sistema.
        I nome presenti all'interno di questo file devono essere definiti all'interno del modulo manage_configuration.h come costanti, cosicche il sistema
        possa sapere quali valori dovra andare a prendere all'interno del file config.
		
	\MODALITA' MULTIPROCESSO: Ho creato un'area di memoria condivisa, dal processo main, ai processi figli. In quest'area e' presente il mutex sull'accept.
		Ho scelto questa modalita' dato che avendo bisogno di mutua esclusione mi bastava usare un mutex, mentre la memoria condivisa avendo un processo main,
		con tutti i processi nel pool figli di questo, 
				
		\GESTIONE SEGNALI-EVENTO CONSOLE:
			\UNIX: usiamo l a funzione sigaction per settare il signalhandler, altrimenti usando la primitiva signal ed eseguendo la exec al suo interno, questa
				non ritorna e quindi ci sara' un blocco di questa che impedisce di riefinire un handler per un segnale.
				In definitiva in base alla modalità del server operiamo di conseguenza:
					-MULTITHREAD: Il signal handler richiama direttamente la exec sovrascrivendo il processo con una nuova esecuzione del server, e quindi nuovo file
					di configurazione.
					-MULTIPROCESSO: Il signal-handler chiude prima tutti i processi nel pool, dopodiche richiama exec.

--------------------------------------------------------

           
-----------------------------------------------------
APPUNTI

Pipe anonymous
    -La coda è una FIFO strutturata cosi: hWrite -->|_BN_|_..._|_B2_|_B1_|_B0_|--> hRead, B0 è il primo blocco inserito, per leggere quindi tutti i blocchi all'interno della coda
        e quindi scaricarla dovrò fare N chiamate a ReadFile su hRead.
    -Dato un processo P del quale vogliamo reindirizzare lo STDOUT sulla pipe, faremo P.STDOUT = hWrite, ovvero lo STDOUT di P sara prorio l'hWrite della pipe.
        - Quando P termina hWrite non viene chiuso.
    -Se la pipe non è abbastanza grande non c'è problema i dati non vengono persi.
    

